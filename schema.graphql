# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  name: String!
  email: String!
  country: String!
  city: String!
  dateOfBirth: String!
  avatarUrl: String!
  tags: [String!]!
  skills: [String!]!
  referralCode: String!
}

type Preferences {
  allowNotifications: Boolean!
}

type Account {
  user: User!
  preferences: Preferences!
}

type Room {
  id: ID!
  name: String!
  type: RoomType!
}

enum RoomType {
  Meeting
  Webinar
}

type ParticipantTrackOptions {
  enabled: Boolean!
  clientId: String
  producerOptions: JSON
  mediaKind: String
  mediaType: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type ParticipantMedia {
  audio: ParticipantTrackOptions!
  video: ParticipantTrackOptions!
  screen: ParticipantTrackOptions!
}

type Participant {
  id: ID!
  user: User!
  role: ParticipantRole!
  media: ParticipantMedia!
}

enum ParticipantRole {
  Owner
  User
}

type TransportOptions {
  id: String!
  iceCandidates: JSON!
  iceParameters: JSON!
  dtlsParameters: JSON!
}

type ConsumerOptions {
  id: String!
  producerId: String!
  rtpParameters: JSON!
}

type RouterOptions {
  rtpCapabilities: JSON!
}

type ProducerOptions {
  id: String!
  kind: String!
  rtpParameters: JSON!
}

type Bookmark {
  id: ID!
  date: DateTime!
  topic: String!
  text: String!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Message {
  id: ID!
  sender: User!
  roomId: String!
  body: String!
  date: DateTime!
  receiverId: String!
  isMe: Boolean!
}

type Record {
  id: String!
  name: String!
  date: DateTime!
  time: String!
}

type Query {
  myAccount: Account!
  roomById(roomId: String!): Room!
  participants(roomId: String!): [Participant!]!
  participantsTracks(roomId: String!): [ParticipantMedia!]!
  getRouter(roomId: String!): RouterOptions!
  getProducer(roomId: String!): ProducerOptions!
  getProducers(roomId: String!): [ProducerOptions!]!
  bookmarks: [Bookmark!]!
  messagesByRoom(roomId: String!): [Message!]!
  messageById(messageId: String!): Message!
  records: [Record!]!
}

type Mutation {
  updateMyAccount(user: UserUpdateRequest!): Account!
  createRoom(password: String, passwordProtected: Boolean!, type: RoomType!, name: String!): Room!
  joinRoom(password: String, code: String!): Room!
  createTransport(clientId: String!, direction: String!, roomId: String!): TransportOptions!
  connectTransport(clientId: String!, direction: String!, dtlsParameters: JSON!, roomId: String!): Boolean!
  createProducer(mediaType: MediaType!, mediaKind: MediaKind!, rtpParameters: JSON!, clientId: String!, roomId: String!, transportId: String!): ProducerOptions!
  createConsumer(clientId: String!, rtpCapabilities: JSON!, roomId: String!, producerId: String!): ConsumerOptions!
  createMessage(receiverId: String, messageBody: String!, roomId: String!): Message!
}

input UserUpdateRequest {
  name: String
  email: String
  country: String
  city: String
  dateOfBirth: DateTime
  tags: [String!]
  skills: [String!]
  referralCode: String
}

enum MediaType {
  userMedia
  screenShare
}

enum MediaKind {
  audio
  video
}

type Subscription {
  messageAdded(roomId: String!): Message!
}
